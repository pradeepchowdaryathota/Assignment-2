{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a834116c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10th letter of the sequence: c\n",
      "758th letter of the sequence: a\n"
     ]
    }
   ],
   "source": [
    "### Q1\n",
    "# Open the file which containing the sequence\n",
    "with open(r\"C:\\cygwin64\\home\\pradeepchowdary\\Informatics_573\\chr1_GL383518v1_alt.fa\",'r') as file:\n",
    "    # Skip the first line which is header\n",
    "    file.readline()\n",
    "    # Read the rest of the file and replace the empty strings and newcharacters in new line\n",
    "    sequence = file.read().replace('\\n', '')\n",
    "\n",
    "# Print the 10th letter of the sequence\n",
    "print(\"10th letter of the sequence:\", sequence[9])\n",
    "\n",
    "# Print the 758th letter of the sequence\n",
    "print(\"758th letter of the sequence:\", sequence[757])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4c0724d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "dce2623f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "79th letter of the reverse complement sequence: G\n",
      "The 500th through the 800th letters of this sequence: gatccacccgccttggcctaccatagtgctgggattataggcgtgagccactgtgcctggccagaattagacgtagatttTAATCATGACTTTCCTATTTGTTGTGTTTCTTGGACAGGTTTATACTAAATAAGAAATTATGTAGTATACTAAATAATACTAttttttttgaaatggagtgtctctctgtcacccaggctggagtgcagtggcgggatctcggcttaccgcaacctccgcctcccaggttcaagcaattctcctgtcacagcctcccaaatagctgggactacaggcacac\n"
     ]
    }
   ],
   "source": [
    "### Q2\n",
    "# Open the file which containing the sequence\n",
    "with open(r\"C:\\cygwin64\\home\\pradeepchowdary\\Informatics_573\\chr1_GL383518v1_alt.fa\",'r') as file:\n",
    "    # Skip the first line which is header\n",
    "    file.readline()\n",
    "    # Read the rest of the file and replace the empty strings and newcharacters in new line\n",
    "    sequence = file.read().replace('\\n', '')\n",
    "    \n",
    "# create a dictionary for the complementary sequences\n",
    "complement_dict = {\"A\":\"T\",\"a\":\"t\",\"T\":\"A\",\"t\":\"a\",\"C\":\"G\",\"c\":\"g\",\"G\":\"C\",\"g\":\"c\"}\n",
    "# reverse the sequence\n",
    "reverse_sequence = sequence[::-1]\n",
    "\n",
    "# join the complementary sequences to the reverse sequence\n",
    "reverse_complement_sequence = ''.join(complement_dict.get(base,base) for base in reverse_sequence)\n",
    "\n",
    "print(\"79th letter of the reverse complement sequence:\", reverse_complement_sequence[78])\n",
    "\n",
    "print(\"The 500th through the 800th letters of this sequence:\",reverse_complement_sequence[499:800])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a2c0f4f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "09522273",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kilobase 0: {'A': 22, 'T': 24, 'G': 4, 'C': 5, 'a': 256, 't': 207, 'g': 253, 'c': 229}\n",
      "Kilobase 1: {'A': 46, 'T': 49, 'G': 20, 'C': 25, 'a': 219, 't': 225, 'g': 202, 'c': 214}\n",
      "Kilobase 2: {'A': 2, 'T': 1, 'G': 3, 'C': 3, 'a': 256, 't': 234, 'g': 252, 'c': 249}\n",
      "Kilobase 3: {'A': 61, 'T': 57, 'G': 27, 'C': 48, 'a': 335, 't': 112, 'g': 240, 'c': 120}\n",
      "Kilobase 4: {'A': 87, 'T': 122, 'G': 52, 'C': 79, 'a': 210, 't': 157, 'g': 153, 'c': 140}\n",
      "Kilobase 5: {'A': 26, 'T': 34, 'G': 9, 'C': 14, 'a': 175, 't': 300, 'g': 199, 'c': 243}\n",
      "Kilobase 6: {'A': 7, 'T': 3, 'G': 2, 'C': 1, 'a': 237, 't': 309, 'g': 199, 'c': 242}\n",
      "Kilobase 7: {'A': 1, 'T': 1, 'G': 0, 'C': 0, 'a': 270, 't': 214, 'g': 282, 'c': 232}\n",
      "Kilobase 8: {'A': 10, 'T': 10, 'G': 4, 'C': 3, 'a': 269, 't': 246, 'g': 225, 'c': 233}\n",
      "Kilobase 9: {'A': 14, 'T': 16, 'G': 11, 'C': 10, 'a': 255, 't': 241, 'g': 211, 'c': 242}\n",
      "Kilobase 10: {'A': 2, 'T': 8, 'G': 0, 'C': 4, 'a': 175, 't': 354, 'g': 206, 'c': 251}\n",
      "Kilobase 11: {'A': 0, 'T': 1, 'G': 0, 'C': 0, 'a': 260, 't': 297, 'g': 204, 'c': 238}\n",
      "Kilobase 12: {'A': 18, 'T': 37, 'G': 25, 'C': 11, 'a': 255, 't': 197, 'g': 248, 'c': 209}\n",
      "Kilobase 13: {'A': 172, 'T': 173, 'G': 87, 'C': 135, 'a': 115, 't': 108, 'g': 105, 'c': 105}\n",
      "Kilobase 14: {'A': 45, 'T': 64, 'G': 51, 'C': 61, 'a': 170, 't': 273, 'g': 145, 'c': 191}\n",
      "Kilobase 15: {'A': 7, 'T': 3, 'G': 2, 'C': 2, 'a': 283, 't': 288, 'g': 197, 'c': 218}\n",
      "Kilobase 16: {'A': 15, 'T': 23, 'G': 1, 'C': 6, 'a': 331, 't': 233, 'g': 192, 'c': 199}\n",
      "Kilobase 17: {'A': 87, 'T': 74, 'G': 41, 'C': 45, 'a': 206, 't': 162, 'g': 199, 'c': 186}\n",
      "Kilobase 18: {'A': 38, 'T': 57, 'G': 33, 'C': 22, 'a': 251, 't': 152, 'g': 255, 'c': 192}\n",
      "Kilobase 19: {'A': 7, 'T': 6, 'G': 6, 'C': 2, 'a': 177, 't': 296, 'g': 244, 'c': 262}\n",
      "Kilobase 20: {'A': 64, 'T': 47, 'G': 15, 'C': 17, 'a': 268, 't': 157, 'g': 227, 'c': 205}\n",
      "Kilobase 21: {'A': 34, 'T': 30, 'G': 11, 'C': 11, 'a': 244, 't': 235, 'g': 217, 'c': 218}\n",
      "Kilobase 22: {'A': 24, 'T': 28, 'G': 10, 'C': 19, 'a': 255, 't': 197, 'g': 234, 'c': 233}\n",
      "Kilobase 23: {'A': 44, 'T': 41, 'G': 21, 'C': 40, 'a': 207, 't': 222, 'g': 215, 'c': 210}\n",
      "Kilobase 24: {'A': 52, 'T': 60, 'G': 27, 'C': 56, 'a': 344, 't': 102, 'g': 239, 'c': 120}\n",
      "Kilobase 25: {'A': 62, 'T': 81, 'G': 36, 'C': 36, 'a': 202, 't': 210, 'g': 182, 'c': 191}\n",
      "Kilobase 26: {'A': 31, 'T': 36, 'G': 11, 'C': 15, 'a': 180, 't': 297, 'g': 196, 'c': 234}\n",
      "Kilobase 27: {'A': 0, 'T': 0, 'G': 0, 'C': 0, 'a': 271, 't': 294, 'g': 212, 'c': 223}\n",
      "Kilobase 28: {'A': 1, 'T': 1, 'G': 0, 'C': 0, 'a': 281, 't': 208, 'g': 275, 'c': 234}\n",
      "Kilobase 29: {'A': 14, 'T': 10, 'G': 5, 'C': 5, 'a': 273, 't': 231, 'g': 224, 'c': 238}\n",
      "Kilobase 30: {'A': 10, 'T': 23, 'G': 10, 'C': 11, 'a': 221, 't': 285, 'g': 195, 'c': 245}\n",
      "Kilobase 31: {'A': 2, 'T': 1, 'G': 0, 'C': 1, 'a': 174, 't': 368, 'g': 211, 'c': 243}\n",
      "Kilobase 32: {'A': 5, 'T': 11, 'G': 5, 'C': 8, 'a': 271, 't': 261, 'g': 212, 'c': 227}\n",
      "Kilobase 33: {'A': 33, 'T': 42, 'G': 25, 'C': 18, 'a': 262, 't': 177, 'g': 236, 'c': 207}\n",
      "Kilobase 34: {'A': 191, 'T': 217, 'G': 130, 'C': 170, 'a': 49, 't': 87, 'g': 72, 'c': 84}\n",
      "Kilobase 35: {'A': 6, 'T': 5, 'G': 3, 'C': 11, 'a': 230, 't': 334, 'g': 180, 'c': 231}\n",
      "Kilobase 36: {'A': 20, 'T': 4, 'G': 2, 'C': 4, 'a': 308, 't': 280, 'g': 183, 'c': 199}\n",
      "Kilobase 37: {'A': 13, 'T': 33, 'G': 4, 'C': 15, 'a': 293, 't': 223, 'g': 202, 'c': 217}\n",
      "Kilobase 38: {'A': 0, 'T': 0, 'G': 0, 'C': 0, 'a': 193, 't': 298, 'g': 229, 'c': 280}\n",
      "Kilobase 39: {'A': 46, 'T': 37, 'G': 11, 'C': 21, 'a': 227, 't': 203, 'g': 215, 'c': 240}\n",
      "Kilobase 40: {'A': 116, 'T': 111, 'G': 70, 'C': 62, 'a': 189, 't': 148, 'g': 172, 'c': 132}\n",
      "Kilobase 41: {'A': 38, 'T': 36, 'G': 20, 'C': 16, 'a': 233, 't': 273, 'g': 199, 'c': 185}\n",
      "Kilobase 42: {'A': 138, 'T': 123, 'G': 62, 'C': 63, 'a': 161, 't': 172, 'g': 125, 'c': 156}\n",
      "Kilobase 43: {'A': 114, 'T': 78, 'G': 69, 'C': 62, 'a': 175, 't': 156, 'g': 186, 'c': 160}\n",
      "Kilobase 44: {'A': 143, 'T': 168, 'G': 205, 'C': 260, 'a': 33, 't': 49, 'g': 51, 'c': 91}\n",
      "Kilobase 45: {'A': 205, 'T': 222, 'G': 254, 'C': 217, 'a': 25, 't': 5, 'g': 55, 'c': 17}\n",
      "Kilobase 46: {'A': 164, 'T': 147, 'G': 136, 'C': 107, 'a': 120, 't': 107, 'g': 114, 'c': 105}\n",
      "Kilobase 47: {'A': 204, 'T': 257, 'G': 189, 'C': 164, 'a': 66, 't': 42, 'g': 35, 'c': 43}\n",
      "Kilobase 48: {'A': 92, 'T': 118, 'G': 87, 'C': 88, 'a': 103, 't': 191, 'g': 144, 'c': 177}\n",
      "Kilobase 49: {'A': 66, 'T': 91, 'G': 58, 'C': 51, 'a': 134, 't': 237, 'g': 167, 'c': 196}\n",
      "Kilobase 50: {'A': 117, 'T': 159, 'G': 124, 'C': 100, 'a': 86, 't': 126, 'g': 127, 'c': 161}\n",
      "Kilobase 51: {'A': 172, 'T': 212, 'G': 155, 'C': 155, 'a': 62, 't': 90, 'g': 67, 'c': 87}\n",
      "Kilobase 52: {'A': 132, 'T': 183, 'G': 136, 'C': 120, 'a': 83, 't': 130, 'g': 113, 'c': 103}\n",
      "Kilobase 53: {'A': 111, 'T': 127, 'G': 67, 'C': 75, 'a': 108, 't': 188, 'g': 140, 'c': 184}\n",
      "Kilobase 54: {'A': 62, 'T': 102, 'G': 63, 'C': 50, 'a': 192, 't': 220, 'g': 139, 'c': 172}\n",
      "Kilobase 55: {'A': 1, 'T': 2, 'G': 2, 'C': 1, 'a': 222, 't': 361, 'g': 200, 'c': 211}\n",
      "Kilobase 56: {'A': 3, 'T': 3, 'G': 1, 'C': 3, 'a': 179, 't': 278, 'g': 239, 'c': 294}\n",
      "Kilobase 57: {'A': 124, 'T': 168, 'G': 113, 'C': 109, 'a': 105, 't': 162, 'g': 114, 'c': 105}\n",
      "Kilobase 58: {'A': 149, 'T': 150, 'G': 137, 'C': 112, 'a': 134, 't': 132, 'g': 114, 'c': 72}\n",
      "Kilobase 59: {'A': 253, 'T': 304, 'G': 230, 'C': 183, 'a': 0, 't': 15, 'g': 15, 'c': 0}\n",
      "Kilobase 60: {'A': 233, 'T': 269, 'G': 264, 'C': 185, 'a': 0, 't': 24, 'g': 24, 'c': 1}\n",
      "Kilobase 61: {'A': 142, 'T': 208, 'G': 119, 'C': 129, 'a': 100, 't': 134, 'g': 88, 'c': 80}\n",
      "Kilobase 62: {'A': 152, 'T': 168, 'G': 122, 'C': 126, 'a': 125, 't': 100, 'g': 104, 'c': 103}\n",
      "Kilobase 63: {'A': 179, 'T': 195, 'G': 179, 'C': 155, 'a': 51, 't': 65, 'g': 77, 'c': 99}\n",
      "Kilobase 64: {'A': 258, 'T': 308, 'G': 228, 'C': 206, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 65: {'A': 261, 'T': 266, 'G': 281, 'C': 192, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 66: {'A': 235, 'T': 316, 'G': 211, 'C': 238, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 67: {'A': 236, 'T': 226, 'G': 215, 'C': 178, 'a': 37, 't': 42, 'g': 33, 'c': 33}\n",
      "Kilobase 68: {'A': 179, 'T': 225, 'G': 147, 'C': 181, 'a': 73, 't': 90, 'g': 46, 'c': 59}\n",
      "Kilobase 69: {'A': 200, 'T': 210, 'G': 212, 'C': 199, 'a': 52, 't': 50, 'g': 30, 'c': 47}\n",
      "Kilobase 70: {'A': 20, 'T': 34, 'G': 14, 'C': 25, 'a': 225, 't': 228, 'g': 243, 'c': 211}\n",
      "Kilobase 71: {'A': 168, 'T': 198, 'G': 168, 'C': 166, 'a': 79, 't': 114, 'g': 66, 'c': 41}\n",
      "Kilobase 72: {'A': 50, 'T': 52, 'G': 24, 'C': 26, 'a': 206, 't': 186, 'g': 236, 'c': 220}\n",
      "Kilobase 73: {'A': 125, 'T': 156, 'G': 111, 'C': 78, 'a': 161, 't': 106, 'g': 137, 'c': 126}\n",
      "Kilobase 74: {'A': 213, 'T': 311, 'G': 214, 'C': 262, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 75: {'A': 53, 'T': 59, 'G': 82, 'C': 54, 'a': 214, 't': 135, 'g': 220, 'c': 183}\n",
      "Kilobase 76: {'A': 202, 'T': 220, 'G': 201, 'C': 201, 'a': 56, 't': 36, 'g': 49, 'c': 35}\n",
      "Kilobase 77: {'A': 198, 'T': 275, 'G': 204, 'C': 252, 'a': 16, 't': 13, 'g': 23, 'c': 19}\n",
      "Kilobase 78: {'A': 139, 'T': 216, 'G': 108, 'C': 170, 'a': 113, 't': 78, 'g': 97, 'c': 79}\n",
      "Kilobase 79: {'A': 216, 'T': 216, 'G': 212, 'C': 193, 'a': 40, 't': 34, 'g': 53, 'c': 36}\n",
      "Kilobase 80: {'A': 204, 'T': 259, 'G': 293, 'C': 244, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 81: {'A': 191, 'T': 236, 'G': 217, 'C': 250, 'a': 21, 't': 29, 'g': 20, 'c': 36}\n",
      "Kilobase 82: {'A': 12, 'T': 31, 'G': 12, 'C': 13, 'a': 208, 't': 302, 'g': 178, 'c': 244}\n",
      "Kilobase 83: {'A': 0, 'T': 0, 'G': 0, 'C': 0, 'a': 211, 't': 360, 'g': 202, 'c': 227}\n",
      "Kilobase 84: {'A': 204, 'T': 240, 'G': 245, 'C': 284, 'a': 6, 't': 10, 'g': 9, 'c': 2}\n",
      "Kilobase 85: {'A': 236, 'T': 249, 'G': 249, 'C': 266, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 86: {'A': 175, 'T': 275, 'G': 199, 'C': 259, 'a': 1, 't': 39, 'g': 51, 'c': 1}\n",
      "Kilobase 87: {'A': 177, 'T': 211, 'G': 238, 'C': 288, 'a': 11, 't': 30, 'g': 16, 'c': 29}\n",
      "Kilobase 88: {'A': 191, 'T': 195, 'G': 278, 'C': 296, 'a': 1, 't': 14, 'g': 21, 'c': 4}\n",
      "Kilobase 89: {'A': 243, 'T': 183, 'G': 275, 'C': 299, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 90: {'A': 213, 'T': 246, 'G': 246, 'C': 263, 'a': 0, 't': 30, 'g': 2, 'c': 0}\n",
      "Kilobase 91: {'A': 215, 'T': 221, 'G': 283, 'C': 281, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 92: {'A': 135, 'T': 146, 'G': 354, 'C': 285, 'a': 6, 't': 21, 'g': 22, 'c': 31}\n",
      "Kilobase 93: {'A': 183, 'T': 210, 'G': 241, 'C': 311, 'a': 16, 't': 18, 'g': 10, 'c': 11}\n",
      "Kilobase 94: {'A': 195, 'T': 162, 'G': 289, 'C': 220, 'a': 42, 't': 12, 'g': 62, 'c': 18}\n",
      "Kilobase 95: {'A': 202, 'T': 225, 'G': 298, 'C': 275, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 96: {'A': 204, 'T': 236, 'G': 216, 'C': 344, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 97: {'A': 215, 'T': 227, 'G': 280, 'C': 278, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 98: {'A': 77, 'T': 82, 'G': 79, 'C': 109, 'a': 113, 't': 207, 'g': 152, 'c': 181}\n",
      "Kilobase 99: {'A': 128, 'T': 101, 'G': 95, 'C': 74, 'a': 181, 't': 124, 'g': 166, 'c': 131}\n",
      "Kilobase 100: {'A': 94, 'T': 64, 'G': 183, 'C': 159, 'a': 116, 't': 144, 'g': 103, 'c': 137}\n",
      "Kilobase 101: {'A': 6, 'T': 21, 'G': 2, 'C': 1, 'a': 199, 't': 292, 'g': 209, 'c': 270}\n",
      "Kilobase 102: {'A': 0, 'T': 0, 'G': 0, 'C': 0, 'a': 245, 't': 339, 'g': 178, 'c': 238}\n",
      "Kilobase 103: {'A': 0, 'T': 0, 'G': 0, 'C': 0, 'a': 220, 't': 362, 'g': 192, 'c': 226}\n",
      "Kilobase 104: {'A': 72, 'T': 74, 'G': 35, 'C': 20, 'a': 259, 't': 204, 'g': 187, 'c': 149}\n",
      "Kilobase 105: {'A': 6, 'T': 4, 'G': 7, 'C': 0, 'a': 340, 't': 218, 'g': 227, 'c': 198}\n",
      "Kilobase 106: {'A': 57, 'T': 18, 'G': 64, 'C': 28, 'a': 163, 't': 220, 'g': 198, 'c': 252}\n",
      "Kilobase 107: {'A': 73, 'T': 88, 'G': 124, 'C': 81, 'a': 218, 't': 152, 'g': 158, 'c': 106}\n",
      "Kilobase 108: {'A': 40, 'T': 33, 'G': 57, 'C': 22, 'a': 198, 't': 201, 'g': 229, 'c': 220}\n",
      "Kilobase 109: {'A': 153, 'T': 137, 'G': 226, 'C': 184, 'a': 103, 't': 43, 'g': 85, 'c': 69}\n",
      "Kilobase 110: {'A': 208, 'T': 176, 'G': 334, 'C': 264, 'a': 0, 't': 6, 'g': 6, 'c': 6}\n",
      "Kilobase 111: {'A': 168, 'T': 193, 'G': 332, 'C': 263, 'a': 6, 't': 17, 'g': 19, 'c': 2}\n",
      "Kilobase 112: {'A': 125, 'T': 139, 'G': 275, 'C': 220, 'a': 88, 't': 65, 'g': 43, 'c': 45}\n",
      "Kilobase 113: {'A': 125, 'T': 114, 'G': 187, 'C': 148, 'a': 101, 't': 93, 'g': 151, 'c': 81}\n",
      "Kilobase 114: {'A': 99, 'T': 67, 'G': 135, 'C': 107, 'a': 125, 't': 144, 'g': 166, 'c': 157}\n",
      "Kilobase 115: {'A': 178, 'T': 141, 'G': 170, 'C': 158, 'a': 87, 't': 87, 'g': 99, 'c': 80}\n",
      "Kilobase 116: {'A': 194, 'T': 214, 'G': 272, 'C': 320, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 117: {'A': 151, 'T': 216, 'G': 231, 'C': 298, 'a': 15, 't': 22, 'g': 28, 'c': 39}\n",
      "Kilobase 118: {'A': 182, 'T': 214, 'G': 273, 'C': 297, 'a': 12, 't': 6, 'g': 11, 'c': 5}\n",
      "Kilobase 119: {'A': 249, 'T': 181, 'G': 276, 'C': 294, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 120: {'A': 256, 'T': 225, 'G': 205, 'C': 237, 'a': 14, 't': 28, 'g': 14, 'c': 21}\n",
      "Kilobase 121: {'A': 284, 'T': 224, 'G': 197, 'C': 215, 'a': 14, 't': 14, 'g': 13, 'c': 39}\n",
      "Kilobase 122: {'A': 211, 'T': 228, 'G': 182, 'C': 217, 'a': 54, 't': 40, 'g': 39, 'c': 29}\n",
      "Kilobase 123: {'A': 281, 'T': 210, 'G': 247, 'C': 172, 'a': 8, 't': 36, 'g': 7, 'c': 39}\n",
      "Kilobase 124: {'A': 302, 'T': 196, 'G': 205, 'C': 225, 'a': 29, 't': 15, 'g': 26, 'c': 2}\n",
      "Kilobase 125: {'A': 258, 'T': 262, 'G': 246, 'C': 214, 'a': 20, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 126: {'A': 250, 'T': 253, 'G': 223, 'C': 234, 'a': 34, 't': 0, 'g': 6, 'c': 0}\n",
      "Kilobase 127: {'A': 90, 'T': 69, 'G': 55, 'C': 58, 'a': 141, 't': 207, 'g': 172, 'c': 208}\n",
      "Kilobase 128: {'A': 285, 'T': 212, 'G': 231, 'C': 165, 'a': 21, 't': 37, 'g': 19, 'c': 30}\n",
      "Kilobase 129: {'A': 285, 'T': 299, 'G': 189, 'C': 196, 'a': 8, 't': 6, 'g': 8, 'c': 9}\n",
      "Kilobase 130: {'A': 165, 'T': 201, 'G': 101, 'C': 119, 'a': 135, 't': 88, 'g': 99, 'c': 92}\n",
      "Kilobase 131: {'A': 61, 'T': 70, 'G': 31, 'C': 31, 'a': 276, 't': 144, 'g': 205, 'c': 182}\n",
      "Kilobase 132: {'A': 139, 'T': 89, 'G': 77, 'C': 81, 'a': 213, 't': 146, 'g': 132, 'c': 123}\n",
      "Kilobase 133: {'A': 209, 'T': 212, 'G': 170, 'C': 148, 'a': 87, 't': 47, 'g': 63, 'c': 64}\n",
      "Kilobase 134: {'A': 313, 'T': 245, 'G': 239, 'C': 203, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 135: {'A': 192, 'T': 171, 'G': 106, 'C': 153, 'a': 70, 't': 111, 'g': 89, 'c': 108}\n",
      "Kilobase 136: {'A': 249, 'T': 207, 'G': 119, 'C': 122, 'a': 87, 't': 51, 'g': 88, 'c': 77}\n",
      "Kilobase 137: {'A': 123, 'T': 147, 'G': 77, 'C': 99, 'a': 94, 't': 176, 'g': 126, 'c': 158}\n",
      "Kilobase 138: {'A': 148, 'T': 132, 'G': 87, 'C': 79, 'a': 141, 't': 137, 'g': 139, 'c': 137}\n",
      "Kilobase 139: {'A': 146, 'T': 147, 'G': 78, 'C': 77, 'a': 105, 't': 162, 'g': 131, 'c': 154}\n",
      "Kilobase 140: {'A': 112, 'T': 143, 'G': 64, 'C': 81, 'a': 129, 't': 163, 'g': 141, 'c': 167}\n",
      "Kilobase 141: {'A': 144, 'T': 124, 'G': 61, 'C': 65, 'a': 190, 't': 101, 'g': 172, 'c': 143}\n",
      "Kilobase 142: {'A': 125, 'T': 125, 'G': 67, 'C': 80, 'a': 118, 't': 172, 'g': 141, 'c': 172}\n",
      "Kilobase 143: {'A': 15, 'T': 18, 'G': 9, 'C': 6, 'a': 300, 't': 182, 'g': 265, 'c': 205}\n",
      "Kilobase 144: {'A': 276, 'T': 295, 'G': 193, 'C': 234, 'a': 2, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 145: {'A': 201, 'T': 182, 'G': 85, 'C': 104, 'a': 121, 't': 101, 'g': 106, 'c': 100}\n",
      "Kilobase 146: {'A': 98, 'T': 88, 'G': 28, 'C': 33, 'a': 204, 't': 162, 'g': 211, 'c': 176}\n",
      "Kilobase 147: {'A': 32, 'T': 35, 'G': 12, 'C': 19, 'a': 199, 't': 259, 'g': 206, 'c': 238}\n",
      "Kilobase 148: {'A': 85, 'T': 55, 'G': 45, 'C': 46, 'a': 252, 't': 189, 'g': 171, 'c': 157}\n",
      "Kilobase 149: {'A': 6, 'T': 1, 'G': 2, 'C': 0, 'a': 312, 't': 271, 'g': 199, 'c': 209}\n",
      "Kilobase 150: {'A': 0, 'T': 0, 'G': 0, 'C': 0, 'a': 274, 't': 256, 'g': 227, 'c': 243}\n",
      "Kilobase 151: {'A': 0, 'T': 0, 'G': 0, 'C': 0, 'a': 307, 't': 248, 'g': 230, 'c': 215}\n",
      "Kilobase 152: {'A': 12, 'T': 6, 'G': 4, 'C': 3, 'a': 275, 't': 304, 'g': 196, 'c': 200}\n",
      "Kilobase 153: {'A': 162, 'T': 125, 'G': 64, 'C': 88, 'a': 147, 't': 138, 'g': 150, 'c': 126}\n",
      "Kilobase 154: {'A': 174, 'T': 157, 'G': 53, 'C': 104, 'a': 206, 't': 133, 'g': 98, 'c': 75}\n",
      "Kilobase 155: {'A': 157, 'T': 132, 'G': 90, 'C': 68, 'a': 141, 't': 141, 'g': 140, 'c': 131}\n",
      "Kilobase 156: {'A': 169, 'T': 126, 'G': 81, 'C': 52, 'a': 126, 't': 154, 'g': 147, 'c': 145}\n",
      "Kilobase 157: {'A': 69, 'T': 73, 'G': 21, 'C': 23, 'a': 221, 't': 187, 'g': 204, 'c': 202}\n",
      "Kilobase 158: {'A': 4, 'T': 8, 'G': 3, 'C': 1, 'a': 248, 't': 356, 'g': 173, 'c': 207}\n",
      "Kilobase 159: {'A': 64, 'T': 89, 'G': 22, 'C': 42, 'a': 146, 't': 254, 'g': 174, 'c': 209}\n",
      "Kilobase 160: {'A': 4, 'T': 4, 'G': 1, 'C': 0, 'a': 337, 't': 221, 'g': 210, 'c': 223}\n",
      "Kilobase 161: {'A': 0, 'T': 0, 'G': 0, 'C': 0, 'a': 406, 't': 240, 'g': 192, 'c': 162}\n",
      "Kilobase 162: {'A': 9, 'T': 9, 'G': 3, 'C': 21, 'a': 271, 't': 282, 'g': 207, 'c': 198}\n",
      "Kilobase 163: {'A': 8, 'T': 17, 'G': 5, 'C': 4, 'a': 176, 't': 311, 'g': 211, 'c': 268}\n",
      "Kilobase 164: {'A': 52, 'T': 52, 'G': 22, 'C': 35, 'a': 217, 't': 311, 'g': 110, 'c': 201}\n",
      "Kilobase 165: {'A': 11, 'T': 28, 'G': 19, 'C': 19, 'a': 239, 't': 277, 'g': 189, 'c': 218}\n",
      "Kilobase 166: {'A': 48, 'T': 73, 'G': 34, 'C': 30, 'a': 209, 't': 268, 'g': 138, 'c': 200}\n",
      "Kilobase 167: {'A': 17, 'T': 29, 'G': 5, 'C': 4, 'a': 241, 't': 263, 'g': 200, 'c': 241}\n",
      "Kilobase 168: {'A': 205, 'T': 195, 'G': 140, 'C': 143, 'a': 76, 't': 121, 'g': 57, 'c': 63}\n",
      "Kilobase 169: {'A': 232, 'T': 277, 'G': 229, 'C': 262, 'a': 0, 't': 0, 'g': 0, 'c': 0}\n",
      "Kilobase 170: {'A': 49, 'T': 52, 'G': 44, 'C': 43, 'a': 196, 't': 282, 'g': 157, 'c': 177}\n",
      "Kilobase 171: {'A': 74, 'T': 55, 'G': 26, 'C': 34, 'a': 264, 't': 258, 'g': 159, 'c': 130}\n",
      "Kilobase 172: {'A': 2, 'T': 1, 'G': 1, 'C': 4, 'a': 224, 't': 307, 'g': 199, 'c': 262}\n",
      "Kilobase 173: {'A': 179, 'T': 132, 'G': 74, 'C': 72, 'a': 182, 't': 144, 'g': 109, 'c': 108}\n",
      "Kilobase 174: {'A': 273, 'T': 264, 'G': 157, 'C': 154, 'a': 29, 't': 25, 'g': 61, 'c': 37}\n",
      "Kilobase 175: {'A': 13, 'T': 17, 'G': 14, 'C': 6, 'a': 304, 't': 193, 'g': 267, 'c': 186}\n",
      "Kilobase 176: {'A': 44, 'T': 61, 'G': 26, 'C': 37, 'a': 212, 't': 222, 'g': 191, 'c': 207}\n",
      "Kilobase 177: {'A': 162, 'T': 119, 'G': 82, 'C': 82, 'a': 120, 't': 155, 'g': 119, 'c': 161}\n",
      "Kilobase 178: {'A': 117, 'T': 93, 'G': 46, 'C': 63, 'a': 204, 't': 188, 'g': 145, 'c': 144}\n",
      "Kilobase 179: {'A': 68, 'T': 59, 'G': 34, 'C': 42, 'a': 198, 't': 217, 'g': 180, 'c': 202}\n",
      "Kilobase 180: {'A': 174, 'T': 130, 'G': 92, 'C': 78, 'a': 141, 't': 135, 'g': 123, 'c': 127}\n",
      "Kilobase 181: {'A': 63, 'T': 40, 'G': 21, 'C': 21, 'a': 275, 't': 171, 'g': 227, 'c': 182}\n",
      "Kilobase 182: {'A': 87, 'T': 66, 'G': 33, 'C': 50, 'a': 68, 't': 46, 'g': 47, 'c': 42}\n"
     ]
    }
   ],
   "source": [
    "### Q3\n",
    "# size of the kilobase window\n",
    "window_size = 1000\n",
    "\n",
    "# nested dictionary to store the sequence counts\n",
    "sequence_counts = {}\n",
    "\n",
    "# iterate over the sequence in kilobase window\n",
    "for i in range(0,len(sequence),window_size):\n",
    "    start = i\n",
    "    end = min(i+window_size,len(sequence))\n",
    "    \n",
    "    # dictionary to store to counts for this specific window\n",
    "    window_counts = {'A':0,'T':0,'G':0,'C':0,'a':0,'t':0,'g':0,'c':0}\n",
    "    \n",
    "    # Occurence of base in this window size\n",
    "    for base in sequence[start:end]:\n",
    "        if base in window_counts:\n",
    "            window_counts[base] += 1\n",
    "        \n",
    "    # store the counts for this kilobase window    \n",
    "    sequence_counts[i//1000] = window_counts\n",
    "    \n",
    "#print nested dictionary\n",
    "for kilobase, counts in sequence_counts.items():\n",
    "    print(f\"Kilobase {kilobase}: {counts}\")\n",
    "       \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbda8a03",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ea6fa812",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counts of each nucleotide in the first 1000 base pairs: [22, 5, 4, 24]\n"
     ]
    }
   ],
   "source": [
    "### Q4(a)\n",
    "# get the counts for first kilobase\n",
    "first_kilobase_counts = sequence_counts[0]\n",
    "\n",
    "# Create a list containing the number of times each nucleotide (A,C,G,T) is contained in the first 1000 base pairs.\n",
    "\n",
    "nucleotide_counts = [\n",
    "    first_kilobase_counts.get('A', 0),\n",
    "    first_kilobase_counts.get('C', 0),\n",
    "    first_kilobase_counts.get('G', 0),\n",
    "    first_kilobase_counts.get('T', 0)\n",
    "]\n",
    "\n",
    "print(\"Counts of each nucleotide in the first 1000 base pairs:\", nucleotide_counts)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c1de851",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8a8d2359",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counts of nucleotides for each kilobase: [[22, 24, 4, 5], [46, 49, 20, 25], [2, 1, 3, 3], [61, 57, 27, 48], [87, 122, 52, 79], [26, 34, 9, 14], [7, 3, 2, 1], [1, 1, 0, 0], [10, 10, 4, 3], [14, 16, 11, 10], [2, 8, 0, 4], [0, 1, 0, 0], [18, 37, 25, 11], [172, 173, 87, 135], [45, 64, 51, 61], [7, 3, 2, 2], [15, 23, 1, 6], [87, 74, 41, 45], [38, 57, 33, 22], [7, 6, 6, 2], [64, 47, 15, 17], [34, 30, 11, 11], [24, 28, 10, 19], [44, 41, 21, 40], [52, 60, 27, 56], [62, 81, 36, 36], [31, 36, 11, 15], [0, 0, 0, 0], [1, 1, 0, 0], [14, 10, 5, 5], [10, 23, 10, 11], [2, 1, 0, 1], [5, 11, 5, 8], [33, 42, 25, 18], [191, 217, 130, 170], [6, 5, 3, 11], [20, 4, 2, 4], [13, 33, 4, 15], [0, 0, 0, 0], [46, 37, 11, 21], [116, 111, 70, 62], [38, 36, 20, 16], [138, 123, 62, 63], [114, 78, 69, 62], [143, 168, 205, 260], [205, 222, 254, 217], [164, 147, 136, 107], [204, 257, 189, 164], [92, 118, 87, 88], [66, 91, 58, 51], [117, 159, 124, 100], [172, 212, 155, 155], [132, 183, 136, 120], [111, 127, 67, 75], [62, 102, 63, 50], [1, 2, 2, 1], [3, 3, 1, 3], [124, 168, 113, 109], [149, 150, 137, 112], [253, 304, 230, 183], [233, 269, 264, 185], [142, 208, 119, 129], [152, 168, 122, 126], [179, 195, 179, 155], [258, 308, 228, 206], [261, 266, 281, 192], [235, 316, 211, 238], [236, 226, 215, 178], [179, 225, 147, 181], [200, 210, 212, 199], [20, 34, 14, 25], [168, 198, 168, 166], [50, 52, 24, 26], [125, 156, 111, 78], [213, 311, 214, 262], [53, 59, 82, 54], [202, 220, 201, 201], [198, 275, 204, 252], [139, 216, 108, 170], [216, 216, 212, 193], [204, 259, 293, 244], [191, 236, 217, 250], [12, 31, 12, 13], [0, 0, 0, 0], [204, 240, 245, 284], [236, 249, 249, 266], [175, 275, 199, 259], [177, 211, 238, 288], [191, 195, 278, 296], [243, 183, 275, 299], [213, 246, 246, 263], [215, 221, 283, 281], [135, 146, 354, 285], [183, 210, 241, 311], [195, 162, 289, 220], [202, 225, 298, 275], [204, 236, 216, 344], [215, 227, 280, 278], [77, 82, 79, 109], [128, 101, 95, 74], [94, 64, 183, 159], [6, 21, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [72, 74, 35, 20], [6, 4, 7, 0], [57, 18, 64, 28], [73, 88, 124, 81], [40, 33, 57, 22], [153, 137, 226, 184], [208, 176, 334, 264], [168, 193, 332, 263], [125, 139, 275, 220], [125, 114, 187, 148], [99, 67, 135, 107], [178, 141, 170, 158], [194, 214, 272, 320], [151, 216, 231, 298], [182, 214, 273, 297], [249, 181, 276, 294], [256, 225, 205, 237], [284, 224, 197, 215], [211, 228, 182, 217], [281, 210, 247, 172], [302, 196, 205, 225], [258, 262, 246, 214], [250, 253, 223, 234], [90, 69, 55, 58], [285, 212, 231, 165], [285, 299, 189, 196], [165, 201, 101, 119], [61, 70, 31, 31], [139, 89, 77, 81], [209, 212, 170, 148], [313, 245, 239, 203], [192, 171, 106, 153], [249, 207, 119, 122], [123, 147, 77, 99], [148, 132, 87, 79], [146, 147, 78, 77], [112, 143, 64, 81], [144, 124, 61, 65], [125, 125, 67, 80], [15, 18, 9, 6], [276, 295, 193, 234], [201, 182, 85, 104], [98, 88, 28, 33], [32, 35, 12, 19], [85, 55, 45, 46], [6, 1, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [12, 6, 4, 3], [162, 125, 64, 88], [174, 157, 53, 104], [157, 132, 90, 68], [169, 126, 81, 52], [69, 73, 21, 23], [4, 8, 3, 1], [64, 89, 22, 42], [4, 4, 1, 0], [0, 0, 0, 0], [9, 9, 3, 21], [8, 17, 5, 4], [52, 52, 22, 35], [11, 28, 19, 19], [48, 73, 34, 30], [17, 29, 5, 4], [205, 195, 140, 143], [232, 277, 229, 262], [49, 52, 44, 43], [74, 55, 26, 34], [2, 1, 1, 4], [179, 132, 74, 72], [273, 264, 157, 154], [13, 17, 14, 6], [44, 61, 26, 37], [162, 119, 82, 82], [117, 93, 46, 63], [68, 59, 34, 42], [174, 130, 92, 78], [63, 40, 21, 21], [87, 66, 33, 50]]\n"
     ]
    }
   ],
   "source": [
    "###Q4(b)\n",
    "\n",
    "all_kilobase_counts = []\n",
    "\n",
    "for i in range(0, len(sequence) ,1000):\n",
    "    nucleotide_counts = [0,0,0,0]\n",
    "    for base in sequence[i:i+1000]:\n",
    "        if base == 'A' :\n",
    "            nucleotide_counts[0] += 1\n",
    "        elif base == 'T' :\n",
    "            nucleotide_counts[1] += 1\n",
    "        elif base == 'G':\n",
    "            nucleotide_counts[2] += 1\n",
    "        elif base == 'C':\n",
    "            nucleotide_counts[3] +=1\n",
    "    all_kilobase_counts.append(nucleotide_counts)\n",
    "        \n",
    "print(\"Counts of nucleotides for each kilobase:\", all_kilobase_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a18ac39",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b601d6d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Occurrences of each nucleotide in each kilobase:\n",
      "Kilobase 1: [22, 5, 4, 24]\n",
      "Kilobase 2: [46, 25, 20, 49]\n",
      "Kilobase 3: [2, 3, 3, 1]\n",
      "Kilobase 4: [61, 48, 27, 57]\n",
      "Kilobase 5: [87, 79, 52, 122]\n",
      "Kilobase 6: [26, 14, 9, 34]\n",
      "Kilobase 7: [7, 1, 2, 3]\n",
      "Kilobase 8: [1, 0, 0, 1]\n",
      "Kilobase 9: [10, 3, 4, 10]\n",
      "Kilobase 10: [14, 10, 11, 16]\n",
      "Kilobase 11: [2, 4, 0, 8]\n",
      "Kilobase 12: [0, 0, 0, 1]\n",
      "Kilobase 13: [18, 11, 25, 37]\n",
      "Kilobase 14: [172, 135, 87, 173]\n",
      "Kilobase 15: [45, 61, 51, 64]\n",
      "Kilobase 16: [7, 2, 2, 3]\n",
      "Kilobase 17: [15, 6, 1, 23]\n",
      "Kilobase 18: [87, 45, 41, 74]\n",
      "Kilobase 19: [38, 22, 33, 57]\n",
      "Kilobase 20: [7, 2, 6, 6]\n",
      "Kilobase 21: [64, 17, 15, 47]\n",
      "Kilobase 22: [34, 11, 11, 30]\n",
      "Kilobase 23: [24, 19, 10, 28]\n",
      "Kilobase 24: [44, 40, 21, 41]\n",
      "Kilobase 25: [52, 56, 27, 60]\n",
      "Kilobase 26: [62, 36, 36, 81]\n",
      "Kilobase 27: [31, 15, 11, 36]\n",
      "Kilobase 28: [0, 0, 0, 0]\n",
      "Kilobase 29: [1, 0, 0, 1]\n",
      "Kilobase 30: [14, 5, 5, 10]\n",
      "Kilobase 31: [10, 11, 10, 23]\n",
      "Kilobase 32: [2, 1, 0, 1]\n",
      "Kilobase 33: [5, 8, 5, 11]\n",
      "Kilobase 34: [33, 18, 25, 42]\n",
      "Kilobase 35: [191, 170, 130, 217]\n",
      "Kilobase 36: [6, 11, 3, 5]\n",
      "Kilobase 37: [20, 4, 2, 4]\n",
      "Kilobase 38: [13, 15, 4, 33]\n",
      "Kilobase 39: [0, 0, 0, 0]\n",
      "Kilobase 40: [46, 21, 11, 37]\n",
      "Kilobase 41: [116, 62, 70, 111]\n",
      "Kilobase 42: [38, 16, 20, 36]\n",
      "Kilobase 43: [138, 63, 62, 123]\n",
      "Kilobase 44: [114, 62, 69, 78]\n",
      "Kilobase 45: [143, 260, 205, 168]\n",
      "Kilobase 46: [205, 217, 254, 222]\n",
      "Kilobase 47: [164, 107, 136, 147]\n",
      "Kilobase 48: [204, 164, 189, 257]\n",
      "Kilobase 49: [92, 88, 87, 118]\n",
      "Kilobase 50: [66, 51, 58, 91]\n",
      "Kilobase 51: [117, 100, 124, 159]\n",
      "Kilobase 52: [172, 155, 155, 212]\n",
      "Kilobase 53: [132, 120, 136, 183]\n",
      "Kilobase 54: [111, 75, 67, 127]\n",
      "Kilobase 55: [62, 50, 63, 102]\n",
      "Kilobase 56: [1, 1, 2, 2]\n",
      "Kilobase 57: [3, 3, 1, 3]\n",
      "Kilobase 58: [124, 109, 113, 168]\n",
      "Kilobase 59: [149, 112, 137, 150]\n",
      "Kilobase 60: [253, 183, 230, 304]\n",
      "Kilobase 61: [233, 185, 264, 269]\n",
      "Kilobase 62: [142, 129, 119, 208]\n",
      "Kilobase 63: [152, 126, 122, 168]\n",
      "Kilobase 64: [179, 155, 179, 195]\n",
      "Kilobase 65: [258, 206, 228, 308]\n",
      "Kilobase 66: [261, 192, 281, 266]\n",
      "Kilobase 67: [235, 238, 211, 316]\n",
      "Kilobase 68: [236, 178, 215, 226]\n",
      "Kilobase 69: [179, 181, 147, 225]\n",
      "Kilobase 70: [200, 199, 212, 210]\n",
      "Kilobase 71: [20, 25, 14, 34]\n",
      "Kilobase 72: [168, 166, 168, 198]\n",
      "Kilobase 73: [50, 26, 24, 52]\n",
      "Kilobase 74: [125, 78, 111, 156]\n",
      "Kilobase 75: [213, 262, 214, 311]\n",
      "Kilobase 76: [53, 54, 82, 59]\n",
      "Kilobase 77: [202, 201, 201, 220]\n",
      "Kilobase 78: [198, 252, 204, 275]\n",
      "Kilobase 79: [139, 170, 108, 216]\n",
      "Kilobase 80: [216, 193, 212, 216]\n",
      "Kilobase 81: [204, 244, 293, 259]\n",
      "Kilobase 82: [191, 250, 217, 236]\n",
      "Kilobase 83: [12, 13, 12, 31]\n",
      "Kilobase 84: [0, 0, 0, 0]\n",
      "Kilobase 85: [204, 284, 245, 240]\n",
      "Kilobase 86: [236, 266, 249, 249]\n",
      "Kilobase 87: [175, 259, 199, 275]\n",
      "Kilobase 88: [177, 288, 238, 211]\n",
      "Kilobase 89: [191, 296, 278, 195]\n",
      "Kilobase 90: [243, 299, 275, 183]\n",
      "Kilobase 91: [213, 263, 246, 246]\n",
      "Kilobase 92: [215, 281, 283, 221]\n",
      "Kilobase 93: [135, 285, 354, 146]\n",
      "Kilobase 94: [183, 311, 241, 210]\n",
      "Kilobase 95: [195, 220, 289, 162]\n",
      "Kilobase 96: [202, 275, 298, 225]\n",
      "Kilobase 97: [204, 344, 216, 236]\n",
      "Kilobase 98: [215, 278, 280, 227]\n",
      "Kilobase 99: [77, 109, 79, 82]\n",
      "Kilobase 100: [128, 74, 95, 101]\n",
      "Kilobase 101: [94, 159, 183, 64]\n",
      "Kilobase 102: [6, 1, 2, 21]\n",
      "Kilobase 103: [0, 0, 0, 0]\n",
      "Kilobase 104: [0, 0, 0, 0]\n",
      "Kilobase 105: [72, 20, 35, 74]\n",
      "Kilobase 106: [6, 0, 7, 4]\n",
      "Kilobase 107: [57, 28, 64, 18]\n",
      "Kilobase 108: [73, 81, 124, 88]\n",
      "Kilobase 109: [40, 22, 57, 33]\n",
      "Kilobase 110: [153, 184, 226, 137]\n",
      "Kilobase 111: [208, 264, 334, 176]\n",
      "Kilobase 112: [168, 263, 332, 193]\n",
      "Kilobase 113: [125, 220, 275, 139]\n",
      "Kilobase 114: [125, 148, 187, 114]\n",
      "Kilobase 115: [99, 107, 135, 67]\n",
      "Kilobase 116: [178, 158, 170, 141]\n",
      "Kilobase 117: [194, 320, 272, 214]\n",
      "Kilobase 118: [151, 298, 231, 216]\n",
      "Kilobase 119: [182, 297, 273, 214]\n",
      "Kilobase 120: [249, 294, 276, 181]\n",
      "Kilobase 121: [256, 237, 205, 225]\n",
      "Kilobase 122: [284, 215, 197, 224]\n",
      "Kilobase 123: [211, 217, 182, 228]\n",
      "Kilobase 124: [281, 172, 247, 210]\n",
      "Kilobase 125: [302, 225, 205, 196]\n",
      "Kilobase 126: [258, 214, 246, 262]\n",
      "Kilobase 127: [250, 234, 223, 253]\n",
      "Kilobase 128: [90, 58, 55, 69]\n",
      "Kilobase 129: [285, 165, 231, 212]\n",
      "Kilobase 130: [285, 196, 189, 299]\n",
      "Kilobase 131: [165, 119, 101, 201]\n",
      "Kilobase 132: [61, 31, 31, 70]\n",
      "Kilobase 133: [139, 81, 77, 89]\n",
      "Kilobase 134: [209, 148, 170, 212]\n",
      "Kilobase 135: [313, 203, 239, 245]\n",
      "Kilobase 136: [192, 153, 106, 171]\n",
      "Kilobase 137: [249, 122, 119, 207]\n",
      "Kilobase 138: [123, 99, 77, 147]\n",
      "Kilobase 139: [148, 79, 87, 132]\n",
      "Kilobase 140: [146, 77, 78, 147]\n",
      "Kilobase 141: [112, 81, 64, 143]\n",
      "Kilobase 142: [144, 65, 61, 124]\n",
      "Kilobase 143: [125, 80, 67, 125]\n",
      "Kilobase 144: [15, 6, 9, 18]\n",
      "Kilobase 145: [276, 234, 193, 295]\n",
      "Kilobase 146: [201, 104, 85, 182]\n",
      "Kilobase 147: [98, 33, 28, 88]\n",
      "Kilobase 148: [32, 19, 12, 35]\n",
      "Kilobase 149: [85, 46, 45, 55]\n",
      "Kilobase 150: [6, 0, 2, 1]\n",
      "Kilobase 151: [0, 0, 0, 0]\n",
      "Kilobase 152: [0, 0, 0, 0]\n",
      "Kilobase 153: [12, 3, 4, 6]\n",
      "Kilobase 154: [162, 88, 64, 125]\n",
      "Kilobase 155: [174, 104, 53, 157]\n",
      "Kilobase 156: [157, 68, 90, 132]\n",
      "Kilobase 157: [169, 52, 81, 126]\n",
      "Kilobase 158: [69, 23, 21, 73]\n",
      "Kilobase 159: [4, 1, 3, 8]\n",
      "Kilobase 160: [64, 42, 22, 89]\n",
      "Kilobase 161: [4, 0, 1, 4]\n",
      "Kilobase 162: [0, 0, 0, 0]\n",
      "Kilobase 163: [9, 21, 3, 9]\n",
      "Kilobase 164: [8, 4, 5, 17]\n",
      "Kilobase 165: [52, 35, 22, 52]\n",
      "Kilobase 166: [11, 19, 19, 28]\n",
      "Kilobase 167: [48, 30, 34, 73]\n",
      "Kilobase 168: [17, 4, 5, 29]\n",
      "Kilobase 169: [205, 143, 140, 195]\n",
      "Kilobase 170: [232, 262, 229, 277]\n",
      "Kilobase 171: [49, 43, 44, 52]\n",
      "Kilobase 172: [74, 34, 26, 55]\n",
      "Kilobase 173: [2, 4, 1, 1]\n",
      "Kilobase 174: [179, 72, 74, 132]\n",
      "Kilobase 175: [273, 154, 157, 264]\n",
      "Kilobase 176: [13, 6, 14, 17]\n",
      "Kilobase 177: [44, 37, 26, 61]\n",
      "Kilobase 178: [162, 82, 82, 119]\n",
      "Kilobase 179: [117, 63, 46, 93]\n",
      "Kilobase 180: [68, 42, 34, 59]\n",
      "Kilobase 181: [174, 78, 92, 130]\n",
      "Kilobase 182: [63, 21, 21, 40]\n",
      "Kilobase 183: [87, 50, 33, 66]\n"
     ]
    }
   ],
   "source": [
    "#Q4 (C)\n",
    "# create an empty list for each kilobase counts\n",
    "each_kilobase_counts = []\n",
    "\n",
    "# create a loop to iterate over all sequences \n",
    "for i in range(0, len(sequence), 1000):\n",
    "    kilobase = sequence[i:i+1000]\n",
    "    nucleotide_counts = [kilobase.count(base) for base in 'ACGT']\n",
    "    \n",
    "    each_kilobase_counts.append(nucleotide_counts)\n",
    "\n",
    "print(\"Occurrences of each nucleotide in each kilobase:\")\n",
    "for i, counts in enumerate(each_kilobase_counts):\n",
    "    print(f\"Kilobase {i+1}: {counts}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa94972d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ae6212c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of each kilobasen"
     ]
    }
   ],
   "source": [
    "### Q4(d)\n",
    "# create an empty list to store sums of each list\n",
    "sum_of_each_kilobase = []\n",
    " \n",
    "# iterate over every list in the each kilobase counts\n",
    "for each_list in each_kilobase_counts:\n",
    "        each_list_sum = sum(each_list)\n",
    "        sum_of_each_kilobase.append(each_list_sum)\n",
    "    \n",
    "print(\"Sum of each kilobase:\",sum_of_each_kilobase)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20070abd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
